{"version":3,"sources":["views/components/toast.tsx","views/components/orders.tsx","views/components/header.tsx","data/productItems.js","api/productApi.ts","views/components/product.tsx","views/components/productListView.tsx","views/components/scrollToTop.tsx","views/pages/product.tsx","views/components/cartItem.tsx","views/components/cartEmpty.tsx","views/components/cartGrid.tsx","data/coupons.js","views/components/cartReceipt.tsx","views/pages/cart.tsx","stores/cart.ts","stores/toast.ts","stores/order.ts","app.tsx","index.tsx"],"names":["inject","toastObject","toast","observer","useEffect","showToast","toastText","type","toastType","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","transition","Slide","rtl","order","orderType","chagneOrderType","className","text","map","key","onClick","productList","cart","cartList","history","useHistory","pathname","useLocation","StyledBadge","withStyles","theme","createStyles","badge","right","top","border","palette","background","paper","padding","Badge","IconButton","push","color","badgeContent","length","getProductItemsGromGist","a","axios","get","response","status","statusText","data","Error","console","error","fetchProductList","sortType","rawProductList","_","orderBy","getProductItems","start","end","isMore","productListSlice","slice","isInCart","ProductItem","onPut","useState","coverImage","setCoverImage","useInView","threshold","target","inView","Grow","in","ref","style","backgroundImage","id","title","price","toLocaleString","put","setProductList","isLoading","setIsLoading","fetchAndGetProductList","initProductList","getProductList","concat","productItem","Skeleton","variant","animation","width","height","CircularProgress","ScrollToTop","Fab","size","smooth","window","scrollTo","behavior","scrollToTop","Product","changeCount","changeChecked","onTake","take","product","Checkbox","checked","ischecked","onChange","inputProps","TextField","defaultValue","count","onInput","e","productId","input","document","getElementById","newCount","parseFloat","value","Number","isInteger","countChanged","min","max","helperText","total","getTotalPrice","aria-label","fontSize","CartEmpty","Button","endIcon","changeCheckedAll","coupons","discountRate","discountAmount","totalPrice","totalDiscountedPrice","selectedCoupon","selectCoupon","changeToastObject","FormControl","Select","context","displayEmpty","MenuItem","coupon","index","data-model","FormHelperText","split","disabled","Cart","MarketStore","persist","this","reduce","previous","current","Object","keys","priceWithRateDiscount","createTransformer","find","observable","action","cartIndexToTake","findIndex","splice","newCheckValue","forEach","cartToChangeChecked","cartToChangeCount","dataModel","props","assign","computed","ToastStore","newToastObject","OrderStore","newOrderType","configure","hydrate","create","cartStore","CartStore","toastStore","orderStore","Root","path","exact","component","to","ReactDOM","render"],"mappings":"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","file":"static/js/main.89ab011b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { ToastObject } from '../../models'\n\nimport { inject, observer } from 'mobx-react';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Slide } from 'react-toastify';\n\ninterface ToastProps {\n    toastObject?: ToastObject\n}\n\nconst Toast: React.FC<ToastProps> = ({ toastObject = {} as ToastObject }) => {\n    useEffect(() => {\n        showToast(toastObject)\n    }, [toastObject]);\n\n    const showToast = (toastObject: ToastObject) => {\n        if (!toastObject.toastText) return;\n\n        toast(toastObject.toastText, {\n            type: toastObject.toastType,\n            position: 'top-center',\n            autoClose: 1000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true\n        });\n    }\n\n    return (\n        <ToastContainer\n            transition={Slide}\n            position='top-center'\n            hideProgressBar\n            closeOnClick\n            rtl={false}\n            draggable\n            pauseOnHover\n        />\n    )\n}\n\nexport default inject(({ toast }) => ({\n    toastObject: toast.toastObject,\n}))(observer(Toast));","import React from 'react';\n\nimport { inject, observer } from 'mobx-react';\n\nimport \"../../css/components/orders.scss\";\n\ninterface ProductsProps {\n    orderType?: string;\n    chagneOrderType?: (newOrderType: string) => void;\n}\n\nconst Orders: React.FC<ProductsProps> = ({ orderType = '', chagneOrderType = (() => { }) }) => {\n    const orderTypes = [\n        { type: '', text: '해제' },\n        { type: 'high', text: '가격높은순' },\n        { type: 'row', text: '가격낮은순' }\n    ]\n\n    return (\n        <div className='orderWrap'>\n            <span>정렬</span>\n            {\n                orderTypes.map((order) => (\n                    <button\n                        key={order.type}\n                        className={`orderButton ${orderType === order.type ? 'select' : ''}`}\n                        onClick={() => chagneOrderType(order.type)}>\n                        {order.text}\n                    </button>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default inject(({ order }) => ({\n    orderType: order.orderType,\n    chagneOrderType: order.chagneOrderType\n}))(observer(Orders));","\nimport React from 'react';\nimport Orders from './orders';\n\nimport { ProductItem } from '../../models';\n\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { inject, observer } from 'mobx-react';\n\nimport { Theme, withStyles, createStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport StoreIcon from '@material-ui/icons/Store';\n\nimport '../../css/components/header.scss';\n\ninterface HeaderProps {\n    productList?: ProductItem[]\n}\nconst Header: React.FC<HeaderProps> = ({ productList = [] }) => {\n    const history = useHistory();\n    const { pathname } = useLocation();\n\n    const StyledBadge = withStyles((theme: Theme) =>\n        createStyles({\n            badge: {\n                right: -3,\n                top: 13,\n                border: `2px solid ${theme.palette.background.paper}`,\n                padding: '0 4px',\n            },\n        }),\n    )(Badge);\n\n    return (\n        <div className='headerWrap'>\n            <div className='mainButton'>\n                <IconButton className={pathname === '/' ? 'select' : ''} onClick={() => history.push('/')} >\n                    메인\n                    <StyledBadge color='secondary'>\n                        <StoreIcon />\n                    </StyledBadge>\n                </IconButton>\n            </div>\n            <div className='cartButton'>\n                <IconButton className={pathname === '/cart' ? 'select' : ''} onClick={() => history.push('/cart')} >\n                    장바구니\n                    <StyledBadge badgeContent={productList.length} color='secondary'>\n                        <ShoppingCartIcon />\n                    </StyledBadge>\n                </IconButton>\n            </div>\n            <Orders />\n        </div>\n    )\n}\n\nexport default inject(({ cart }) => ({\n    productList: cart.cartList,\n}))(observer(Header));","import axios from 'axios'\n\nexport const getProductItemsGromGist = async () => {\n    const GIST_URL = 'https://gist.githubusercontent.com/samsara1019/eadeeaf9796b847a5a48023b9274b79f/raw/40e886b061a98a4886044b42dede3fe3dcbad0d9/reactCart.json';\n    try {\n        const response = await axios.get(GIST_URL);\n        if (response.status === 200 && response.statusText === 'OK') {\n            const responseGoodList = response.data.data;\n            if (!responseGoodList.length) return;\n            return response.data.data;\n        } else {\n            throw new Error('Response Error');\n        }\n    } catch (error) {\n        console.error(error.response);\n    }\n}\n\n","import { ProductItem } from '../models';\nimport { getProductItemsGromGist } from '../data/productItems';\nimport _ from 'lodash';\n\nexport const DEFAULT_GET_COUNT: number = 15;\n\nlet productList: ProductItem[] = []\n\nexport const fetchProductList = async (sortType: string) => {\n    let rawProductList = await getProductItemsGromGist();\n    if (sortType === 'row') {\n        productList = _.orderBy(\n            rawProductList,\n            'price',\n            'asc'\n        );\n    } else if (sortType === 'high') {\n        productList = _.orderBy(\n            rawProductList,\n            'price',\n            'desc'\n        );\n    } else {\n        productList = rawProductList;\n    }\n}\n\nexport const getProductItems = (start: number = 0): { productListSlice: ProductItem[], isMore: boolean } => {\n    const end: number = (start + DEFAULT_GET_COUNT);\n    const isMore: boolean = end < productList.length;\n    const productListSlice = productList.slice(start, end);\n    return { productListSlice, isMore }\n}\n\nexport const getProductTotalCount = (): number => {\n    return productList.length;\n}\n\n","import React, { useState, useEffect } from 'react';\n\nimport { ProductItem } from '../../models'\n\nimport { inject, observer } from 'mobx-react';\n\nimport { useInView } from 'react-intersection-observer';\n\nimport Grow from '@material-ui/core/Grow';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport RemoveShoppingCartIcon from '@material-ui/icons/RemoveShoppingCart';\n\nimport '../../css/components/product.scss';\n\ninterface productProps {\n    ProductItem: ProductItem;\n    onPut: (product: ProductItem) => void;\n    isInCart?: (productId: string) => boolean;\n}\n\nconst Product: React.FC<productProps> = ({ ProductItem, onPut = (() => { }), isInCart = (() => { }) }) => {\n    const [coverImage, setCoverImage] = useState('');\n\n    const [target, inView] = useInView({\n        threshold: 0.5,\n    });\n\n    // 이미지 영역에 화면에 보일 때 이미지 로드 \n    useEffect(() => {\n        if (inView) {\n            setCoverImage(ProductItem.coverImage);\n        }\n    }, [inView]);\n\n    return (\n        <Grow in={true}>\n            <div className='productWrap' ref={target}>\n                <div className='productTop'>\n                    <div className='productImage'\n                        style={{ backgroundImage: `url(${coverImage})` }}>\n                    </div>\n                    <IconButton className='cartButton' onClick={() => onPut(ProductItem)}>\n                        {\n                            !isInCart(ProductItem.id)\n                                ? <AddShoppingCartIcon />\n                                : <RemoveShoppingCartIcon />\n                        }\n                    </IconButton>\n                </div>\n                <div className='productBottom'>\n                    <div className='title' title={ProductItem.title}>\n                        {ProductItem.title}\n                    </div>\n                    <div className='price'>\n                        <div>\n                            {ProductItem.price.toLocaleString()}원\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Grow>\n    )\n}\nexport default inject(({ cart }) => ({\n    isInCart: cart.isInCart\n}))(observer(Product));\n","\nimport React, { useState, useEffect } from 'react';\n\nimport { ProductItem } from '../../models';\nimport { getProductItems, fetchProductList } from '../../api/productApi';\nimport Product from './product';\n\nimport { inject, observer } from 'mobx-react';\n\nimport { useInView } from 'react-intersection-observer'\n\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport '../../css/components/productList.scss';\n\ninterface ProductListViewProps {\n    onPut?: (product: ProductItem) => void;\n    orderType?: string;\n}\n\nconst ProductListView: React.FC<ProductListViewProps> = ({ onPut = (() => { }), orderType = '' }) => {\n    const [productList, setProductList] = useState([] as ProductItem[])\n    let [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const [target, inView] = useInView({\n        threshold: 0.5,\n    });\n\n\n    useEffect(() => {\n        // orderType이 변경되면 productList 초기화\n        fetchAndGetProductList();\n    }, [orderType]);\n\n    const fetchAndGetProductList = async () => {\n        await fetchProductList(orderType);\n        initProductList();\n    }\n\n    const initProductList = () => {\n        const { productListSlice, isMore } = getProductItems(0);\n        setProductList(productListSlice);\n        setIsLoading(isMore);\n    };\n\n    // 맨 아래 로딩 영역이 화면에 보이면 productList를 더 불러옴\n    useEffect(() => {\n        if (!inView) return;\n        getProductList();\n    }, [inView]);\n\n\n    const getProductList = () => {\n        const { productListSlice, isMore } = getProductItems(productList.length);\n        setProductList(productList.concat(productListSlice));\n        setIsLoading(isMore);\n    };\n\n    return (\n        <div className='productListWrap'>\n            {productList.map((productItem) => (\n                <Product\n                    key={productItem.id}\n                    ProductItem={productItem}\n                    onPut={onPut}\n                />\n            ))}\n            <div ref={target}>\n                {\n                    isLoading &&\n                    <Skeleton variant='rect' animation='wave' width={'100%'} height={'100%'} className='skeleton'>\n                        <CircularProgress className='loadingCircle' />\n                    </Skeleton>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default inject(({ cart, order }) => ({\n    onPut: cart.put,\n    orderType: order.orderType,\n}))(observer(ProductListView));","import React from 'react';\n\nimport Fab from '@material-ui/core/Fab';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\nimport '../../css/components/scrollToTop.scss';\n\nconst ScrollToTop: React.FC = () => {\n    const scrollToTop = (smooth: boolean = false) => {\n        window.scrollTo({\n            top: 0,\n            behavior: smooth ? 'smooth' : 'auto',\n        })\n    }\n\n    return (\n        <Fab className='ScrollToTop' color='primary' size='small'\n            onClick={() => scrollToTop(true)}>\n            <KeyboardArrowUpIcon />\n        </Fab>\n    )\n}\n\nexport default ScrollToTop;","\nimport React from 'react';\nimport ProductListView from '../components/productListView';\nimport ScrollToTop from '../components/scrollToTop';\n\n\nimport '../../css/pages/product.scss';\n\nconst Product: React.FC = () => {\n    return (\n        <div className='ProductWrap'>\n            <ProductListView />\n            <ScrollToTop />\n        </div>\n\n    )\n}\n\nexport default Product;","import * as React from 'react';\n\nimport { CartProductItem, ProductItem } from '../../models';\n\nimport { inject, observer } from 'mobx-react';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\ninterface CartItemProps {\n    product: CartProductItem;\n    onTake?: (product: ProductItem) => void;\n    changeChecked?: (productId: string) => void;\n    changeCount?: (productId: string, newCount: number) => void;\n}\n\nconst CartItem: React.FC<CartItemProps> = ({ product, onTake = (() => { }), changeChecked = (() => { }), changeCount = (() => { }) }) => {\n    const MIN_CART_COUNT = 1;\n    const MAX_CART_COUNT = 9999;\n\n    const countChanged = (e: any, productId: string) => {\n        const input = document.getElementById(`numberField-${productId}`) as any;\n        const newCount = parseFloat(e.target.value);\n\n        if (!Number.isInteger(newCount) || newCount <= 0) {\n            input.value = MIN_CART_COUNT\n        } else if (newCount > MAX_CART_COUNT) {\n            input.value = MAX_CART_COUNT\n        }\n\n        changeCount(productId, newCount)\n    }\n\n    const getTotalPrice = (price: number = 0, count: number = 0): string => {\n        const total: number = price * count;\n        return total.toLocaleString()\n    }\n\n    return (\n        <div className='content'>\n            <div className='verticalCenter padding5'>\n                <Checkbox\n                    checked={product.ischecked}\n                    color='primary'\n                    onChange={() => changeChecked(product.id)}\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n            </div>\n            <div className='verticalCenter'>{product.title}</div>\n            <div className='verticalCenter'>{product.price.toLocaleString()}</div>\n            <div className='verticalCenter'>\n                <TextField\n                    id={`numberField-${product.id}`}\n                    type='number'\n                    defaultValue={product.count}\n                    onInput={(e) => countChanged(e, product.id)}\n                    inputProps={{ min: MIN_CART_COUNT, max: MAX_CART_COUNT }}\n                    error={product.count < 1}\n                    helperText={product.count < 1 ? '1개 이상 선택해주세요.' : ''}\n                />\n            </div>\n            <div className='verticalCenter'>{getTotalPrice(product.price, product.count)}</div>\n            <div className='verticalCenter'>\n                <IconButton aria-label='delete' size='small' onClick={() => onTake(product)}>\n                    <DeleteIcon fontSize='inherit' />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default inject(({ cart }) => ({\n    changeCount: cart.changeCount,\n    changeChecked: cart.changeChecked,\n    onTake: cart.take,\n}))(observer(CartItem));\n","import * as React from 'react';\n\nimport { useHistory } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport StoreIcon from '@material-ui/icons/Store';\n\nimport '../../css/components/cartEmpty.scss'\n\nconst CartEmpty: React.FC = () => {\n    const history = useHistory();\n\n    return (\n        <div className='cartEmptyWrap'>\n            <span className='emptyText'>아직 장바구니에 담은 상품이 없습니다.</span>\n            <Button\n                onClick={() => history.push('/')}\n                variant='contained'\n                endIcon={<StoreIcon />}\n            >\n                상품 구경하러 가기\n            </Button>\n        </div>\n    )\n}\n\nexport default CartEmpty;","\nimport * as React from 'react';\nimport CartItem from './cartItem';\nimport CartEmpty from './cartEmpty';\n\nimport { CartProductItem } from '../../models'\n\nimport { inject, observer } from 'mobx-react';\n\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport '../../css/components/cartGrid.scss'\n\ninterface CartGridProps {\n    productList?: CartProductItem[];\n    changeCheckedAll?: (newCheckValue: boolean) => void\n}\n\nconst CartGrid: React.FC<CartGridProps> = ({ productList = [], changeCheckedAll = (() => { }) }) => {\n    return (\n        <div className='cartGridWrap'>\n            <div className='header'>\n                <Checkbox\n                    color='primary'\n                    onChange={(e) => changeCheckedAll(e.target.checked)}\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n            </div>\n            <div className='header'>상품명</div>\n            <div className='header'>단가</div>\n            <div className='header'>수량</div>\n            <div className='header'>가격</div>\n            <div className='header'>삭제</div>\n\n            {productList.length ?\n                productList.map((product: CartProductItem) =>\n                    <CartItem product={product} key={product.id} />\n                )\n                : <CartEmpty />}\n        </div>\n    )\n}\n\nexport default inject(({ cart }) => ({\n    productList: cart.cartList,\n    changeCheckedAll: cart.changeCheckedAll,\n}))(observer(CartGrid));\n","const coupons = [\n    {\n        type: 'rate',\n        title: '10% 할인 쿠폰',\n        discountRate: 10,\n    },\n    {\n        type: 'amount',\n        title: '10,000원 할인 쿠폰',\n        discountAmount: 10000,\n    }\n];\n\nexport default coupons ","import * as React from 'react';\n\nimport { Coupon, CartProductItem, ToastObject } from '../../models';\nimport coupons from '../../data/coupons';\n\nimport { inject, observer } from 'mobx-react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport LocalFloristIcon from '@material-ui/icons/LocalFlorist';\n\n\nimport '../../css/components/cartReceipt.scss';\n\ninterface CartReceiptProps {\n    totalPrice?: number;\n    totalDiscountedPrice?: number;\n    selectedCoupon?: Coupon;\n    selectCoupon?: (context: any) => void;\n    productList?: CartProductItem[];\n    changeToastObject?: (newToastObject: ToastObject) => void;\n}\n\nconst CartReceipt: React.FC<CartReceiptProps>\n    = ({ totalPrice = 0,\n        totalDiscountedPrice = 0,\n        selectedCoupon = {},\n        selectCoupon = (() => { }),\n        productList = [],\n        changeToastObject = (() => { })\n    }) => {\n        return (\n            <div className='cartReceiptWrap'>\n                <h1>결제정보</h1>\n                <div className='content'>\n                    <div>\n                        상품 금액\n                    </div>\n                    <div className='toRight'>\n                        {totalPrice.toLocaleString()}원\n                    </div>\n                    <div className='verticalCenter'>\n                        쿠폰\n                    </div>\n                    <FormControl className='toRight'>\n                        <Select value={selectedCoupon.title || ''} onChange={(e, context) => selectCoupon(context)} displayEmpty>\n                            <MenuItem value=''>\n                                <em>쿠폰 적용 안함</em>\n                            </MenuItem>\n                            {\n                                coupons.map((coupon, index) =>\n                                    (<MenuItem data-model={coupon} value={coupon.title} key={index}>{coupon.title}</MenuItem>)\n                                )\n                            }\n                        </Select>\n                        <FormHelperText>쿠폰을 선택하세요.</FormHelperText>\n                    </FormControl>\n                </div>\n                <div>\n                    최종 결제 금액\n                </div>\n\n                <div className='toRight totalDiscountedPrice'>\n                    {totalDiscountedPrice.toLocaleString().split('.')[0]}원\n                </div>\n                <Button\n                    disabled={!productList.length}\n                    variant='contained'\n                    color='primary'\n                    endIcon={<LocalFloristIcon />}\n                    onClick={() => changeToastObject({ toastText: `😎 준비중입니다!`, toastType: 'info' })}\n                >\n                    구매하기\n                </Button>\n            </div>\n        )\n    }\n\nexport default inject(({ cart, toast }) => ({\n    totalPrice: cart.totalPrice,\n    totalDiscountedPrice: cart.totalDiscountedPrice,\n    selectedCoupon: cart.selectedCoupon,\n    selectCoupon: cart.selectCoupon,\n    productList: cart.cartList,\n    changeToastObject: toast.changeToastObject\n}))(observer(CartReceipt));\n","\nimport * as React from 'react';\nimport CartGrid from '../components/cartGrid';\nimport CardTotal from '../components/cartReceipt';\n\nconst Cart: React.FC = () => {\n    return (\n        <div>\n            <CartGrid />\n            <CardTotal />\n        </div>\n    )\n}\n\nexport default Cart;","import { observable, action, computed } from 'mobx';\nimport { persist } from 'mobx-persist'\nimport { ProductItem, CartProductItem, Coupon } from '../models'\nimport { createTransformer } from 'mobx-utils'\nexport default class MarketStore {\n    @persist('list') @observable cartList = [] as CartProductItem[];\n    @persist('object') @observable selectedCoupon = {} as Coupon;\n\n    @action\n    put = (product: ProductItem): void => {\n        const exists = this.cartList.find(cart => cart.id === product.id);\n        if (!exists) {\n            this.cartList.push({ ...product, count: 1, ischecked: true });\n        } else {\n            this.take(product)\n        }\n    };\n\n    @action\n    take = (product: ProductItem): void => {\n        const cartIndexToTake: number = this.cartList.findIndex(cart => cart.id === product.id)\n        this.cartList.splice(cartIndexToTake, 1);\n    };\n\n    @action\n    changeCheckedAll = (newCheckValue: boolean): void => {\n        this.cartList.forEach(cart => {\n            cart.ischecked = newCheckValue\n        });\n    }\n\n    @action\n    changeChecked = (productId: string): void => {\n        const cartToChangeChecked = this.cartList.find(cart => cart.id === productId);\n        if (cartToChangeChecked)\n            cartToChangeChecked.ischecked = !cartToChangeChecked.ischecked;\n    }\n\n    @action\n    changeCount = (productId: string, newCount: number): void => {\n        const cartToChangeCount = this.cartList.find(cart => cart.id === productId);\n\n        if (cartToChangeCount) {\n            cartToChangeCount.count = newCount > 0 ? newCount : 1;\n        }\n    }\n    @action\n    selectCoupon = (context: any): void => {\n        const dataModel = context.props['data-model'];\n        if (!dataModel) this.selectedCoupon = {} as Coupon\n        else {\n            this.selectedCoupon = Object.assign(dataModel);\n        }\n    }\n\n    @computed\n    get totalPrice(): number {\n        return this.cartList.reduce((previous, current) => {\n            if (current.ischecked)\n                return previous + current.price * current.count;\n            else\n                return previous\n        }, 0);\n    }\n\n    @computed\n    get totalDiscountedPrice(): number {\n        if (Object.keys(this.selectedCoupon).length === 0) {\n            return this.totalPrice\n        }\n        let priceWithRateDiscount = this.cartList.reduce((previous, current) => {\n            if (current.ischecked) {\n                let price = current.price\n                if (this.selectedCoupon.type === 'rate') {\n                    price -= price * ((this.selectedCoupon.discountRate || 0) / 100)\n                }\n                return previous + price * current.count;\n            }\n            else\n                return previous\n        }, 0)\n\n        if (this.selectedCoupon.type === 'amount' && priceWithRateDiscount)\n            priceWithRateDiscount -= this.selectedCoupon.discountAmount || 0\n\n        return priceWithRateDiscount\n    }\n\n\n    @computed\n    get isInCart() {\n        return createTransformer((productId: string): boolean => {\n            const target = this.cartList.find(cart => cart.id === productId)\n            return !!target;\n        })\n    }\n\n}","import { observable, action } from 'mobx';\nimport { ToastObject } from '../models'\n\nexport default class ToastStore {\n    @observable toastObject = {} as ToastObject;\n\n    @action\n    changeToastObject = (newToastObject: ToastObject) => {\n        this.toastObject = newToastObject;\n    };\n\n}\n","import { observable, action } from 'mobx';\nexport default class OrderStore {\n    @observable orderType = '';\n    @action\n    chagneOrderType = (newOrderType: string): void => {\n        this.orderType = newOrderType;\n    }\n}","import * as React from 'react';\nimport Toast from './views/components/toast';\nimport Header from './views/components/header';\nimport Product from './views/pages/product';\nimport Cart from './views/pages/cart';\n\nimport { Provider } from 'mobx-react';\nimport { create } from 'mobx-persist';\n\nimport { toast } from 'react-toastify';\nimport CartStore from './stores/cart';\nimport ToastStore from './stores/toast';\nimport OrderStore from './stores/order';\n\n\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport './css/index.scss';\n\ntoast.configure();\n\nconst hydrate = create({});\nconst cartStore = new CartStore();\nconst toastStore = new ToastStore();\nconst orderStore = new OrderStore();\nhydrate('cart', cartStore);\n\nconst Root: React.FC = () => (\n    <Provider cart={cartStore} toast={toastStore} order={orderStore}>\n        <BrowserRouter >\n            <div className='wrap'>\n                <Toast />\n                <Header />\n                <div className='bodyWrap'>\n                    <Switch>\n                        <Route path='/' exact component={Product} />\n                        <Route path='/product' component={Product} />\n                        <Route path='/cart' component={Cart} />\n                        <Redirect path='*' to='/' />\n                    </Switch>\n                </div>\n            </div>\n        </BrowserRouter>\n    </Provider>\n)\n\nexport default Root","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}